import { DescriptionType } from 'node-datachannel';
import { PeerInfo } from './PeerInfo';
export interface ConstructorOptions {
    selfId: string;
    targetPeerId: string;
    routerId: string;
    isOffering: boolean;
    stunUrls: string[];
    bufferHighThreshold?: number;
    bufferLowThreshold?: number;
    newConnectionTimeout?: number;
    maxPingPongAttempts?: number;
    pingPongTimeout?: number;
    flushRetryTimeout?: number;
    onLocalDescription: (type: DescriptionType, description: string) => void;
    onLocalCandidate: (candidate: string, mid: string) => void;
    onOpen: () => void;
    onMessage: (msg: string) => void;
    onClose: (err?: Error) => void;
    onError: (err: Error) => void;
    onBufferLow: () => void;
    onBufferHigh: () => void;
}
export declare class Connection {
    private readonly selfId;
    private peerInfo;
    private readonly routerId;
    private readonly isOffering;
    private readonly stunUrls;
    private readonly bufferHighThreshold;
    private readonly bufferLowThreshold;
    private readonly newConnectionTimeout;
    private readonly maxPingPongAttempts;
    private readonly pingPongTimeout;
    private readonly flushRetryTimeout;
    private readonly onLocalDescription;
    private readonly onLocalCandidate;
    private readonly onOpen;
    private readonly onMessage;
    private readonly onClose;
    private readonly onError;
    private readonly onBufferLow;
    private readonly onBufferHigh;
    private readonly messageQueue;
    private connection;
    private dataChannel;
    private paused;
    private lastState;
    private lastGatheringState;
    private flushTimeoutRef;
    private connectionTimeoutRef;
    private peerPingTimeoutRef;
    private peerPongTimeoutRef;
    private rtt;
    private respondedPong;
    private rttStart;
    private readonly logger;
    constructor({ selfId, targetPeerId, routerId, isOffering, stunUrls, bufferHighThreshold, bufferLowThreshold, newConnectionTimeout, maxPingPongAttempts, pingPongTimeout, flushRetryTimeout, onLocalDescription, onLocalCandidate, onOpen, onMessage, onClose, onError, onBufferLow, onBufferHigh }: ConstructorOptions);
    connect(): void;
    setRemoteDescription(description: string, type: DescriptionType): void;
    addRemoteCandidate(candidate: string, mid: string): void;
    send(message: string): Promise<void>;
    close(err?: Error): void;
    ping(attempt?: number): void | never;
    pong(attempt?: number): void;
    setPeerInfo(peerInfo: PeerInfo): void;
    getPeerInfo(): PeerInfo;
    getPeerId(): string;
    getRtt(): number | null;
    getBufferedAmount(): number;
    getMaxMessageSize(): number;
    getQueueSize(): number;
    isOpen(): boolean;
    private setupDataChannel;
    private openDataChannel;
    private attemptToFlushMessages;
}
